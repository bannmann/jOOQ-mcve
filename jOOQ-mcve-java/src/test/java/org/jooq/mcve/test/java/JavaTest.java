package org.jooq.mcve.test.java;

import static org.assertj.core.api.Assertions.assertThat;
import static org.jooq.generated.tables.TestTable.TEST_TABLE;

import java.time.LocalDateTime;

import org.jooq.DataType;
import org.jooq.TableField;
import org.jooq.generated.tables.records.TestTableRecord;
import org.jooq.impl.SQLDataType;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

public class JavaTest
{
    @ParameterizedTest()
    @MethodSource("scalarFields")
    public void testScalarField(TableField<?, ?> field, DataType<?> expectedType)
    {
        assertThat(field.getDataType()).describedAs("%s data type", field.getName())
            .isEqualTo(expectedType);
    }

    static Arguments[] scalarFields()
    {
        return new Arguments[]{
            Arguments.of(TEST_TABLE.NUMBER, SQLDataType.INTEGER),
            Arguments.of(TEST_TABLE.STRING, SQLDataType.VARCHAR(32)),
            Arguments.of(TEST_TABLE.DATE_TIME, SQLDataType.LOCALDATETIME(6))
        };
    }

    @ParameterizedTest()
    @MethodSource("arrayFields")
    public void testArrayField(TableField<?, ?> field, Class<?> expectedComponentType)
    {
        assertThat(field.getDataType()
            .getArrayComponentType()).describedAs("%s component data type", field.getName())
            .isEqualTo(expectedComponentType);
    }

    static Arguments[] arrayFields()
    {
        return new Arguments[]{
            Arguments.of(TEST_TABLE.NUMBERS, Integer.class),
            Arguments.of(TEST_TABLE.STRINGS, String.class),
            Arguments.of(TEST_TABLE.DATE_TIMES, LocalDateTime.class)
        };
    }

    @ParameterizedTest()
    @MethodSource("scalarGetters")
    public void testScalarGetter(String methodName, Class<?> expectedType) throws ReflectiveOperationException
    {
        var returnType = TestTableRecord.class.getMethod(methodName)
            .getReturnType();

        assertThat(returnType).describedAs("%s() return type", methodName)
            .isEqualTo(expectedType);
    }

    static Arguments[] scalarGetters()
    {
        return new Arguments[]{
            Arguments.of("getNumber", Integer.class),
            Arguments.of("getString", String.class),
            Arguments.of("getDateTime", LocalDateTime.class)
        };
    }

    @ParameterizedTest()
    @MethodSource("arrayGetters")
    public void testArrayGetter(String methodName, Class<?> expectedComponentType) throws ReflectiveOperationException
    {
        Class<?> componentType = TestTableRecord.class.getMethod(methodName)
            .getReturnType()
            .getComponentType();

        assertThat(componentType).describedAs("component type of %s()", methodName)
            .isEqualTo(expectedComponentType);
    }

    static Arguments[] arrayGetters()
    {
        return new Arguments[]{
            Arguments.of("getNumbers", Integer.class),
            Arguments.of("getStrings", String.class),
            Arguments.of("getDateTimes", LocalDateTime.class)
        };
    }
}
